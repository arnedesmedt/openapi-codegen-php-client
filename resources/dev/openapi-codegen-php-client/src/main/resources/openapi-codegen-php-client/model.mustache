<?php
{{#models}}

declare(strict_types=1);

namespace {{modelPackage}};
{{#model}}
use {{invokerPackage}}\Default\{{#lambda.pascalcase}}{{name}}{{/lambda.pascalcase}}Default;
{{#getIsAnyType}}{{#discriminator}}
use ADS\JsonImmutableObjects\Polymorphism\Discriminator;
use ADS\JsonImmutableObjects\Polymorphism\DiscriminatorLogic;{{/discriminator}}{{/getIsAnyType}}{{^getIsAnyType}}
use ADS\JsonImmutableObjects\JsonSchemaAwareRecordLogic;
use ADS\OpenApi\Codegen\Endpoint\SpecialKeySupportLogic;
use EventEngine\Data\SpecialKeySupport;
use EventEngine\JsonSchema\JsonSchemaAwareRecord;{{/getIsAnyType}}

final class {{classname}}{{^getIsAnyType}} implements SpecialKeySupport, JsonSchemaAwareRecord{{#discriminator}}, Discriminator{{/discriminator}}{{/getIsAnyType}}{{#getIsAnyType}}{{#discriminator}} implements Discriminator{{/discriminator}}{{/getIsAnyType}}
{
    use {{classname}}Default;
    {{^getIsAnyType}}use JsonSchemaAwareRecordLogic;
    use SpecialKeySupportLogic;{{/getIsAnyType}}{{#getIsAnyType}}{{#discriminator}}use DiscriminatorLogic;

    public static function propertyName(): string
    {
        return '{{propertyName}}';
    }

    /** @inheritDoc */
    public static function mapping(): array
    {
        return [{{#mappedModels}}
            '{{mappingName}}' => {{modelName}}::class,{{/mappedModels}}];
    }

    /** @inheritDoc */
    public static function jsonSchemaAwareRecords(): array
    {
        return [{{#interfaceModels}}
            {{name}}::class,{{/interfaceModels}}
        ];
    }
{{/discriminator}}{{/getIsAnyType}}{{^getIsAnyType}}

// phpcs:disable SlevomatCodingStandard.Classes.UnusedPrivateElements.UnusedProperty
// phpcs:disable Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps
{{#vars}}
    /** @var {{#composedSchemas.anyOf}}{{openApiType}}{{^-last}}|{{/-last}}{{/composedSchemas.anyOf}}{{^composedSchemas.anyOf}}{{#complexType}}{{^isContainer}}{{complexType}}{{/isContainer}}{{#isContainer}}{{baseType}}{{/isContainer}}{{/complexType}}{{^complexType}}{{baseType}}{{/complexType}}{{#isContainer}}<{{^items.complexType}}{{#items.isContainer}}mixed{{/items.isContainer}}{{^items.isContainer}}{{items.baseType}}{{/items.isContainer}}{{/items.complexType}}{{#items.complexType}}{{{.}}}{{/items.complexType}}>{{/isContainer}}{{#isFreeFormObject}}<mixed>{{/isFreeFormObject}}{{#isNullable}}|null{{/isNullable}}{{^required}}{{^isNullable}}|null{{/isNullable}}{{/required}}{{/composedSchemas.anyOf}} */
    private ${{name}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}{{#isNullable}} = null{{/isNullable}}{{^required}}{{^isNullable}} = null{{/isNullable}}{{/required}}{{/defaultValue}};
{{/vars}}
{{#vars}}
    /** @return {{#composedSchemas.anyOf}}{{openApiType}}{{^-last}}|{{/-last}}{{/composedSchemas.anyOf}}{{^composedSchemas.anyOf}}{{#complexType}}{{^isContainer}}{{complexType}}{{/isContainer}}{{#isContainer}}{{baseType}}{{/isContainer}}{{/complexType}}{{^complexType}}{{baseType}}{{/complexType}}{{#isContainer}}<{{^items.complexType}}{{#items.isContainer}}mixed{{/items.isContainer}}{{^items.isContainer}}{{items.baseType}}{{/items.isContainer}}{{/items.complexType}}{{#items.complexType}}{{{.}}}{{/items.complexType}}>{{/isContainer}}{{#isFreeFormObject}}<mixed>{{/isFreeFormObject}}{{#isNullable}}|null{{/isNullable}}{{^required}}{{^isNullable}}|null{{/isNullable}}{{/required}}{{/composedSchemas.anyOf}} */
    public function {{getter}}()
    {
        return $this->{{name}};
    }
{{/vars}}

    /** @return array<string, string> */
    private static function arrayPropItemTypeMap(): array
    {
        return [{{#vars}}{{#isListContainer}}{{^items.isContainer}}
            '{{name}}' => {{^complexType}}'{{items.baseType}}'{{/complexType}}{{#complexType}}{{{.}}}::class{{/complexType}},{{/items.isContainer}}{{/isListContainer}}{{#isContainer}}{{^isListContainer}}{{^items.isContainer}}
            '{{name}}' => {{^complexType}}'{{items.baseType}}'{{/complexType}}{{#complexType}}{{{.}}}::class{{/complexType}},{{/items.isContainer}}{{/isListContainer}}{{/isContainer}}{{/vars}}
        ];
    }

    /** @return array<string, int> */
    private static function maxValues(): array
    {
        return [{{#vars}}{{#maximum}}
            '{{name}}' => {{maximum}},{{/maximum}}{{/vars}}
        ];
    }

    /** @return array<string,string> */
    public function keyMapping(): array
    {
        return [{{#vars}}
            '{{baseName}}' => '{{name}}',{{/vars}}
        ];
    }
// phpcs:enable
{{/getIsAnyType}}}{{/model}}{{/models}}
